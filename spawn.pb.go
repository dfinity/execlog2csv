// Copyright 2018 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: spawn.proto

package main

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Digest of a file or action cache entry.
type Digest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The content hash as a lowercase hex string including any leading zeroes.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The original content size in bytes.
	SizeBytes int64 `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// The name of the digest function used to compute the hash.
	HashFunctionName string `protobuf:"bytes,3,opt,name=hash_function_name,json=hashFunctionName,proto3" json:"hash_function_name,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Digest) Reset() {
	*x = Digest{}
	mi := &file_spawn_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Digest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Digest) ProtoMessage() {}

func (x *Digest) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Digest.ProtoReflect.Descriptor instead.
func (*Digest) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{0}
}

func (x *Digest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Digest) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *Digest) GetHashFunctionName() string {
	if x != nil {
		return x.HashFunctionName
	}
	return ""
}

type File struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path to the file relative to the execution root.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Symlink target path.
	// Only set for unresolved symlinks.
	SymlinkTargetPath string `protobuf:"bytes,4,opt,name=symlink_target_path,json=symlinkTargetPath,proto3" json:"symlink_target_path,omitempty"`
	// File digest.
	// Always omitted for unresolved symlinks. May be omitted for empty files.
	Digest *Digest `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	// Whether the file is a tool.
	// Only set for inputs, never for outputs.
	IsTool        bool `protobuf:"varint,3,opt,name=is_tool,json=isTool,proto3" json:"is_tool,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *File) Reset() {
	*x = File{}
	mi := &file_spawn_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{1}
}

func (x *File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *File) GetSymlinkTargetPath() string {
	if x != nil {
		return x.SymlinkTargetPath
	}
	return ""
}

func (x *File) GetDigest() *Digest {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *File) GetIsTool() bool {
	if x != nil {
		return x.IsTool
	}
	return false
}

// Contents of command environment.
type EnvironmentVariable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnvironmentVariable) Reset() {
	*x = EnvironmentVariable{}
	mi := &file_spawn_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentVariable) ProtoMessage() {}

func (x *EnvironmentVariable) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentVariable.ProtoReflect.Descriptor instead.
func (*EnvironmentVariable) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{2}
}

func (x *EnvironmentVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvironmentVariable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Command execution platform. This message needs to be kept in sync
// with [Platform][google.devtools.remoteexecution.v1test.Platform].
type Platform struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Properties    []*Platform_Property   `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Platform) Reset() {
	*x = Platform{}
	mi := &file_spawn_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Platform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Platform) ProtoMessage() {}

func (x *Platform) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Platform.ProtoReflect.Descriptor instead.
func (*Platform) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{3}
}

func (x *Platform) GetProperties() []*Platform_Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

// Timing, size, and memory statistics for a SpawnExec.
type SpawnMetrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total wall time spent running a spawn, measured locally.
	TotalTime *durationpb.Duration `protobuf:"bytes,1,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	// Time taken to convert the spawn into a network request.
	ParseTime *durationpb.Duration `protobuf:"bytes,2,opt,name=parse_time,json=parseTime,proto3" json:"parse_time,omitempty"`
	// Time spent communicating over the network.
	NetworkTime *durationpb.Duration `protobuf:"bytes,3,opt,name=network_time,json=networkTime,proto3" json:"network_time,omitempty"`
	// Time spent fetching remote outputs.
	FetchTime *durationpb.Duration `protobuf:"bytes,4,opt,name=fetch_time,json=fetchTime,proto3" json:"fetch_time,omitempty"`
	// Time spent waiting in queues.
	QueueTime *durationpb.Duration `protobuf:"bytes,5,opt,name=queue_time,json=queueTime,proto3" json:"queue_time,omitempty"`
	// Time spent setting up the environment in which the spawn is run.
	SetupTime *durationpb.Duration `protobuf:"bytes,6,opt,name=setup_time,json=setupTime,proto3" json:"setup_time,omitempty"`
	// Time spent uploading outputs to a remote store.
	UploadTime *durationpb.Duration `protobuf:"bytes,7,opt,name=upload_time,json=uploadTime,proto3" json:"upload_time,omitempty"`
	// Time spent running the subprocess.
	ExecutionWallTime *durationpb.Duration `protobuf:"bytes,8,opt,name=execution_wall_time,json=executionWallTime,proto3" json:"execution_wall_time,omitempty"`
	// Time spent by the execution framework processing outputs.
	ProcessOutputsTime *durationpb.Duration `protobuf:"bytes,9,opt,name=process_outputs_time,json=processOutputsTime,proto3" json:"process_outputs_time,omitempty"`
	// Time spent in previous failed attempts, not including queue time.
	RetryTime *durationpb.Duration `protobuf:"bytes,10,opt,name=retry_time,json=retryTime,proto3" json:"retry_time,omitempty"`
	// Total size in bytes of inputs or 0 if unavailable.
	InputBytes int64 `protobuf:"varint,11,opt,name=input_bytes,json=inputBytes,proto3" json:"input_bytes,omitempty"`
	// Total number of input files or 0 if unavailable.
	InputFiles int64 `protobuf:"varint,12,opt,name=input_files,json=inputFiles,proto3" json:"input_files,omitempty"`
	// Estimated memory usage or 0 if unavailable.
	MemoryEstimateBytes int64 `protobuf:"varint,13,opt,name=memory_estimate_bytes,json=memoryEstimateBytes,proto3" json:"memory_estimate_bytes,omitempty"`
	// Limit of total size of inputs or 0 if unavailable.
	InputBytesLimit int64 `protobuf:"varint,14,opt,name=input_bytes_limit,json=inputBytesLimit,proto3" json:"input_bytes_limit,omitempty"`
	// Limit of total number of input files or 0 if unavailable.
	InputFilesLimit int64 `protobuf:"varint,15,opt,name=input_files_limit,json=inputFilesLimit,proto3" json:"input_files_limit,omitempty"`
	// Limit of total size of outputs or 0 if unavailable.
	OutputBytesLimit int64 `protobuf:"varint,16,opt,name=output_bytes_limit,json=outputBytesLimit,proto3" json:"output_bytes_limit,omitempty"`
	// Limit of total number of output files or 0 if unavailable.
	OutputFilesLimit int64 `protobuf:"varint,17,opt,name=output_files_limit,json=outputFilesLimit,proto3" json:"output_files_limit,omitempty"`
	// Memory limit or 0 if unavailable.
	MemoryBytesLimit int64 `protobuf:"varint,18,opt,name=memory_bytes_limit,json=memoryBytesLimit,proto3" json:"memory_bytes_limit,omitempty"`
	// Time limit or 0 if unavailable.
	TimeLimit *durationpb.Duration `protobuf:"bytes,19,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	// Instant when the spawn started to execute.
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpawnMetrics) Reset() {
	*x = SpawnMetrics{}
	mi := &file_spawn_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpawnMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnMetrics) ProtoMessage() {}

func (x *SpawnMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnMetrics.ProtoReflect.Descriptor instead.
func (*SpawnMetrics) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{4}
}

func (x *SpawnMetrics) GetTotalTime() *durationpb.Duration {
	if x != nil {
		return x.TotalTime
	}
	return nil
}

func (x *SpawnMetrics) GetParseTime() *durationpb.Duration {
	if x != nil {
		return x.ParseTime
	}
	return nil
}

func (x *SpawnMetrics) GetNetworkTime() *durationpb.Duration {
	if x != nil {
		return x.NetworkTime
	}
	return nil
}

func (x *SpawnMetrics) GetFetchTime() *durationpb.Duration {
	if x != nil {
		return x.FetchTime
	}
	return nil
}

func (x *SpawnMetrics) GetQueueTime() *durationpb.Duration {
	if x != nil {
		return x.QueueTime
	}
	return nil
}

func (x *SpawnMetrics) GetSetupTime() *durationpb.Duration {
	if x != nil {
		return x.SetupTime
	}
	return nil
}

func (x *SpawnMetrics) GetUploadTime() *durationpb.Duration {
	if x != nil {
		return x.UploadTime
	}
	return nil
}

func (x *SpawnMetrics) GetExecutionWallTime() *durationpb.Duration {
	if x != nil {
		return x.ExecutionWallTime
	}
	return nil
}

func (x *SpawnMetrics) GetProcessOutputsTime() *durationpb.Duration {
	if x != nil {
		return x.ProcessOutputsTime
	}
	return nil
}

func (x *SpawnMetrics) GetRetryTime() *durationpb.Duration {
	if x != nil {
		return x.RetryTime
	}
	return nil
}

func (x *SpawnMetrics) GetInputBytes() int64 {
	if x != nil {
		return x.InputBytes
	}
	return 0
}

func (x *SpawnMetrics) GetInputFiles() int64 {
	if x != nil {
		return x.InputFiles
	}
	return 0
}

func (x *SpawnMetrics) GetMemoryEstimateBytes() int64 {
	if x != nil {
		return x.MemoryEstimateBytes
	}
	return 0
}

func (x *SpawnMetrics) GetInputBytesLimit() int64 {
	if x != nil {
		return x.InputBytesLimit
	}
	return 0
}

func (x *SpawnMetrics) GetInputFilesLimit() int64 {
	if x != nil {
		return x.InputFilesLimit
	}
	return 0
}

func (x *SpawnMetrics) GetOutputBytesLimit() int64 {
	if x != nil {
		return x.OutputBytesLimit
	}
	return 0
}

func (x *SpawnMetrics) GetOutputFilesLimit() int64 {
	if x != nil {
		return x.OutputFilesLimit
	}
	return 0
}

func (x *SpawnMetrics) GetMemoryBytesLimit() int64 {
	if x != nil {
		return x.MemoryBytesLimit
	}
	return 0
}

func (x *SpawnMetrics) GetTimeLimit() *durationpb.Duration {
	if x != nil {
		return x.TimeLimit
	}
	return nil
}

func (x *SpawnMetrics) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

// Each message contains an executed command, its full inputs and outputs, and
// other information. This format is relatively costly to produce and results
// in very large files, due to the amount of repeated information. The
// --experimental_execution_log_compact_file format provides a better
// alternative.
type SpawnExec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The command that was run.
	CommandArgs []string `protobuf:"bytes,1,rep,name=command_args,json=commandArgs,proto3" json:"command_args,omitempty"`
	// The command environment.
	EnvironmentVariables []*EnvironmentVariable `protobuf:"bytes,2,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty"`
	// The command execution platform.
	Platform *Platform `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	// The inputs at the time of the execution.
	Inputs []*File `protobuf:"bytes,4,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// All the listed outputs paths. The paths are relative to the execution root.
	// Actual outputs are a subset of the listed outputs. These paths are sorted.
	ListedOutputs []string `protobuf:"bytes,5,rep,name=listed_outputs,json=listedOutputs,proto3" json:"listed_outputs,omitempty"`
	// Whether the spawn was allowed to run remotely.
	Remotable bool `protobuf:"varint,6,opt,name=remotable,proto3" json:"remotable,omitempty"`
	// Whether the spawn was allowed to be cached.
	Cacheable bool `protobuf:"varint,7,opt,name=cacheable,proto3" json:"cacheable,omitempty"`
	// The spawn timeout.
	TimeoutMillis int64 `protobuf:"varint,8,opt,name=timeout_millis,json=timeoutMillis,proto3" json:"timeout_millis,omitempty"`
	// The mnemonic of the action this spawn belongs to.
	Mnemonic string `protobuf:"bytes,10,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	// The outputs generated by the execution.
	// In order for one of the listed_outputs to appear here, it must have been
	// produced and have the expected type (file, directory or symlink).
	ActualOutputs []*File `protobuf:"bytes,11,rep,name=actual_outputs,json=actualOutputs,proto3" json:"actual_outputs,omitempty"`
	// If the spawn did not hit a disk or remote cache, this will be the name of
	// the runner, e.g. "remote", "linux-sandbox" or "worker".
	//
	// If the spawn hit a disk or remote cache, this will be "disk cache hit" or
	// "remote cache hit", respectively. This includes the case where a remote
	// cache was hit while executing the spawn remotely.
	//
	// Note that spawns whose owning action hits the persistent action cache
	// are never reported at all.
	//
	// This won't always match the spawn strategy. For the dynamic strategy, it
	// will be the runner for the first branch to complete. For the remote
	// strategy, it might be a local runner in case of a fallback.
	Runner string `protobuf:"bytes,12,opt,name=runner,proto3" json:"runner,omitempty"`
	// Whether the spawn hit a disk or remote cache.
	CacheHit bool `protobuf:"varint,13,opt,name=cache_hit,json=cacheHit,proto3" json:"cache_hit,omitempty"`
	// A text status describing an execution error. Empty in case of success.
	Status string `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	// This field contains the contents of SpawnResult.exitCode.
	// Its semantics varies greatly depending on the status field.
	// Dependable: if status is empty, exit_code is guaranteed to be zero.
	ExitCode int32 `protobuf:"varint,15,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// Whether the spawn was allowed to be cached remotely.
	RemoteCacheable bool `protobuf:"varint,16,opt,name=remote_cacheable,json=remoteCacheable,proto3" json:"remote_cacheable,omitempty"`
	// The canonical label of the target this spawn belongs to.
	TargetLabel string `protobuf:"bytes,18,opt,name=target_label,json=targetLabel,proto3" json:"target_label,omitempty"`
	// The action cache digest.
	// Only available when remote execution, remote cache or disk cache was
	// enabled for this spawn.
	Digest *Digest `protobuf:"bytes,19,opt,name=digest,proto3" json:"digest,omitempty"`
	// Timing, size and memory statistics.
	Metrics       *SpawnMetrics `protobuf:"bytes,20,opt,name=metrics,proto3" json:"metrics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpawnExec) Reset() {
	*x = SpawnExec{}
	mi := &file_spawn_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpawnExec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnExec) ProtoMessage() {}

func (x *SpawnExec) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnExec.ProtoReflect.Descriptor instead.
func (*SpawnExec) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{5}
}

func (x *SpawnExec) GetCommandArgs() []string {
	if x != nil {
		return x.CommandArgs
	}
	return nil
}

func (x *SpawnExec) GetEnvironmentVariables() []*EnvironmentVariable {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

func (x *SpawnExec) GetPlatform() *Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *SpawnExec) GetInputs() []*File {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *SpawnExec) GetListedOutputs() []string {
	if x != nil {
		return x.ListedOutputs
	}
	return nil
}

func (x *SpawnExec) GetRemotable() bool {
	if x != nil {
		return x.Remotable
	}
	return false
}

func (x *SpawnExec) GetCacheable() bool {
	if x != nil {
		return x.Cacheable
	}
	return false
}

func (x *SpawnExec) GetTimeoutMillis() int64 {
	if x != nil {
		return x.TimeoutMillis
	}
	return 0
}

func (x *SpawnExec) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

func (x *SpawnExec) GetActualOutputs() []*File {
	if x != nil {
		return x.ActualOutputs
	}
	return nil
}

func (x *SpawnExec) GetRunner() string {
	if x != nil {
		return x.Runner
	}
	return ""
}

func (x *SpawnExec) GetCacheHit() bool {
	if x != nil {
		return x.CacheHit
	}
	return false
}

func (x *SpawnExec) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SpawnExec) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *SpawnExec) GetRemoteCacheable() bool {
	if x != nil {
		return x.RemoteCacheable
	}
	return false
}

func (x *SpawnExec) GetTargetLabel() string {
	if x != nil {
		return x.TargetLabel
	}
	return ""
}

func (x *SpawnExec) GetDigest() *Digest {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *SpawnExec) GetMetrics() *SpawnMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// An entry in the compact log format.
// This is the format generated by --experimental_execution_log_compact_file.
//
// Each entry describes either an executed spawn or non-spawn action or a piece
// of data referenced by other entries. This considerably reduces the runtime
// overhead and the size of the log when compared to the
// --execution_log_{binary,json}_file formats.
//
// To ensure that the log can be parsed in a single pass, every entry must be
// serialized after all other entries it references by ID. However, entries
// aren't guaranteed to be serialized in increasing ID order.
//
// Entries other than spawns and non-spawn actions may not be assumed to be
// canonical. For performance reasons, the same file, directory or input set may
// be serialized multiple times with a different ID.
type ExecLogEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If nonzero, then this entry may be referenced by later entries by this ID.
	// Nonzero IDs are unique within an execution log, but may not be contiguous.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The entry payload.
	//
	// Types that are valid to be assigned to Type:
	//
	//	*ExecLogEntry_Invocation_
	//	*ExecLogEntry_File_
	//	*ExecLogEntry_Directory_
	//	*ExecLogEntry_UnresolvedSymlink_
	//	*ExecLogEntry_InputSet_
	//	*ExecLogEntry_Spawn_
	//	*ExecLogEntry_SymlinkAction_
	//	*ExecLogEntry_SymlinkEntrySet_
	//	*ExecLogEntry_RunfilesTree_
	Type          isExecLogEntry_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecLogEntry) Reset() {
	*x = ExecLogEntry{}
	mi := &file_spawn_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecLogEntry) ProtoMessage() {}

func (x *ExecLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecLogEntry.ProtoReflect.Descriptor instead.
func (*ExecLogEntry) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{6}
}

func (x *ExecLogEntry) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExecLogEntry) GetType() isExecLogEntry_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ExecLogEntry) GetInvocation() *ExecLogEntry_Invocation {
	if x != nil {
		if x, ok := x.Type.(*ExecLogEntry_Invocation_); ok {
			return x.Invocation
		}
	}
	return nil
}

func (x *ExecLogEntry) GetFile() *ExecLogEntry_File {
	if x != nil {
		if x, ok := x.Type.(*ExecLogEntry_File_); ok {
			return x.File
		}
	}
	return nil
}

func (x *ExecLogEntry) GetDirectory() *ExecLogEntry_Directory {
	if x != nil {
		if x, ok := x.Type.(*ExecLogEntry_Directory_); ok {
			return x.Directory
		}
	}
	return nil
}

func (x *ExecLogEntry) GetUnresolvedSymlink() *ExecLogEntry_UnresolvedSymlink {
	if x != nil {
		if x, ok := x.Type.(*ExecLogEntry_UnresolvedSymlink_); ok {
			return x.UnresolvedSymlink
		}
	}
	return nil
}

func (x *ExecLogEntry) GetInputSet() *ExecLogEntry_InputSet {
	if x != nil {
		if x, ok := x.Type.(*ExecLogEntry_InputSet_); ok {
			return x.InputSet
		}
	}
	return nil
}

func (x *ExecLogEntry) GetSpawn() *ExecLogEntry_Spawn {
	if x != nil {
		if x, ok := x.Type.(*ExecLogEntry_Spawn_); ok {
			return x.Spawn
		}
	}
	return nil
}

func (x *ExecLogEntry) GetSymlinkAction() *ExecLogEntry_SymlinkAction {
	if x != nil {
		if x, ok := x.Type.(*ExecLogEntry_SymlinkAction_); ok {
			return x.SymlinkAction
		}
	}
	return nil
}

func (x *ExecLogEntry) GetSymlinkEntrySet() *ExecLogEntry_SymlinkEntrySet {
	if x != nil {
		if x, ok := x.Type.(*ExecLogEntry_SymlinkEntrySet_); ok {
			return x.SymlinkEntrySet
		}
	}
	return nil
}

func (x *ExecLogEntry) GetRunfilesTree() *ExecLogEntry_RunfilesTree {
	if x != nil {
		if x, ok := x.Type.(*ExecLogEntry_RunfilesTree_); ok {
			return x.RunfilesTree
		}
	}
	return nil
}

type isExecLogEntry_Type interface {
	isExecLogEntry_Type()
}

type ExecLogEntry_Invocation_ struct {
	Invocation *ExecLogEntry_Invocation `protobuf:"bytes,2,opt,name=invocation,proto3,oneof"`
}

type ExecLogEntry_File_ struct {
	File *ExecLogEntry_File `protobuf:"bytes,3,opt,name=file,proto3,oneof"`
}

type ExecLogEntry_Directory_ struct {
	Directory *ExecLogEntry_Directory `protobuf:"bytes,4,opt,name=directory,proto3,oneof"`
}

type ExecLogEntry_UnresolvedSymlink_ struct {
	UnresolvedSymlink *ExecLogEntry_UnresolvedSymlink `protobuf:"bytes,5,opt,name=unresolved_symlink,json=unresolvedSymlink,proto3,oneof"`
}

type ExecLogEntry_InputSet_ struct {
	InputSet *ExecLogEntry_InputSet `protobuf:"bytes,6,opt,name=input_set,json=inputSet,proto3,oneof"`
}

type ExecLogEntry_Spawn_ struct {
	Spawn *ExecLogEntry_Spawn `protobuf:"bytes,7,opt,name=spawn,proto3,oneof"`
}

type ExecLogEntry_SymlinkAction_ struct {
	SymlinkAction *ExecLogEntry_SymlinkAction `protobuf:"bytes,8,opt,name=symlink_action,json=symlinkAction,proto3,oneof"`
}

type ExecLogEntry_SymlinkEntrySet_ struct {
	SymlinkEntrySet *ExecLogEntry_SymlinkEntrySet `protobuf:"bytes,9,opt,name=symlink_entry_set,json=symlinkEntrySet,proto3,oneof"`
}

type ExecLogEntry_RunfilesTree_ struct {
	RunfilesTree *ExecLogEntry_RunfilesTree `protobuf:"bytes,10,opt,name=runfiles_tree,json=runfilesTree,proto3,oneof"`
}

func (*ExecLogEntry_Invocation_) isExecLogEntry_Type() {}

func (*ExecLogEntry_File_) isExecLogEntry_Type() {}

func (*ExecLogEntry_Directory_) isExecLogEntry_Type() {}

func (*ExecLogEntry_UnresolvedSymlink_) isExecLogEntry_Type() {}

func (*ExecLogEntry_InputSet_) isExecLogEntry_Type() {}

func (*ExecLogEntry_Spawn_) isExecLogEntry_Type() {}

func (*ExecLogEntry_SymlinkAction_) isExecLogEntry_Type() {}

func (*ExecLogEntry_SymlinkEntrySet_) isExecLogEntry_Type() {}

func (*ExecLogEntry_RunfilesTree_) isExecLogEntry_Type() {}

type Platform_Property struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Platform_Property) Reset() {
	*x = Platform_Property{}
	mi := &file_spawn_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Platform_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Platform_Property) ProtoMessage() {}

func (x *Platform_Property) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Platform_Property.ProtoReflect.Descriptor instead.
func (*Platform_Property) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Platform_Property) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Platform_Property) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Information pertaining to the entire invocation.
// May appear at most once in the initial position.
type ExecLogEntry_Invocation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The hash function used to compute digests.
	HashFunctionName string `protobuf:"bytes,1,opt,name=hash_function_name,json=hashFunctionName,proto3" json:"hash_function_name,omitempty"`
	// The name of the subdirectory of the runfiles tree corresponding to the
	// main repository (also known as the "workspace name").
	//
	// With --enable_bzlmod, this is always "_main", but can vary when using
	// WORKSPACE.
	WorkspaceRunfilesDirectory string `protobuf:"bytes,2,opt,name=workspace_runfiles_directory,json=workspaceRunfilesDirectory,proto3" json:"workspace_runfiles_directory,omitempty"`
	// Whether --experimental_sibling_repository_layout is enabled.
	SiblingRepositoryLayout bool `protobuf:"varint,3,opt,name=sibling_repository_layout,json=siblingRepositoryLayout,proto3" json:"sibling_repository_layout,omitempty"`
	// The ID of the invocation.
	Id            string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecLogEntry_Invocation) Reset() {
	*x = ExecLogEntry_Invocation{}
	mi := &file_spawn_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecLogEntry_Invocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecLogEntry_Invocation) ProtoMessage() {}

func (x *ExecLogEntry_Invocation) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecLogEntry_Invocation.ProtoReflect.Descriptor instead.
func (*ExecLogEntry_Invocation) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ExecLogEntry_Invocation) GetHashFunctionName() string {
	if x != nil {
		return x.HashFunctionName
	}
	return ""
}

func (x *ExecLogEntry_Invocation) GetWorkspaceRunfilesDirectory() string {
	if x != nil {
		return x.WorkspaceRunfilesDirectory
	}
	return ""
}

func (x *ExecLogEntry_Invocation) GetSiblingRepositoryLayout() bool {
	if x != nil {
		return x.SiblingRepositoryLayout
	}
	return false
}

func (x *ExecLogEntry_Invocation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// An input or output file.
type ExecLogEntry_File struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The file path.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// A digest of the file contents.
	// The hash function name is omitted. It can be obtained from Invocation.
	// May be omitted for empty files.
	Digest        *Digest `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecLogEntry_File) Reset() {
	*x = ExecLogEntry_File{}
	mi := &file_spawn_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecLogEntry_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecLogEntry_File) ProtoMessage() {}

func (x *ExecLogEntry_File) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecLogEntry_File.ProtoReflect.Descriptor instead.
func (*ExecLogEntry_File) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{6, 1}
}

func (x *ExecLogEntry_File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ExecLogEntry_File) GetDigest() *Digest {
	if x != nil {
		return x.Digest
	}
	return nil
}

// An input or output directory.
// May be a source directory, a fileset tree, or a tree artifact.
type ExecLogEntry_Directory struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The directory path.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The contained files, whose paths are relative to the directory.
	Files         []*ExecLogEntry_File `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecLogEntry_Directory) Reset() {
	*x = ExecLogEntry_Directory{}
	mi := &file_spawn_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecLogEntry_Directory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecLogEntry_Directory) ProtoMessage() {}

func (x *ExecLogEntry_Directory) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecLogEntry_Directory.ProtoReflect.Descriptor instead.
func (*ExecLogEntry_Directory) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{6, 2}
}

func (x *ExecLogEntry_Directory) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ExecLogEntry_Directory) GetFiles() []*ExecLogEntry_File {
	if x != nil {
		return x.Files
	}
	return nil
}

// An unresolved symlink.
type ExecLogEntry_UnresolvedSymlink struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The symlink path.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The path the symlink points to.
	TargetPath    string `protobuf:"bytes,2,opt,name=target_path,json=targetPath,proto3" json:"target_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecLogEntry_UnresolvedSymlink) Reset() {
	*x = ExecLogEntry_UnresolvedSymlink{}
	mi := &file_spawn_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecLogEntry_UnresolvedSymlink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecLogEntry_UnresolvedSymlink) ProtoMessage() {}

func (x *ExecLogEntry_UnresolvedSymlink) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecLogEntry_UnresolvedSymlink.ProtoReflect.Descriptor instead.
func (*ExecLogEntry_UnresolvedSymlink) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{6, 3}
}

func (x *ExecLogEntry_UnresolvedSymlink) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ExecLogEntry_UnresolvedSymlink) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

// A set of spawn inputs.
// The contents of the set are the directly contained entries in addition to
// the contents of all transitively referenced sets. When order matters,
// transitive sets come before direct entries and within a set, entries are
// considered in left-to-right order ("postorder").
// Sets are not canonical: two sets with different structure may yield the
// same contents.
type ExecLogEntry_InputSet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Entry IDs of files, directories, unresolved symlinks or runfiles trees
	// belonging to this set.
	InputIds []uint32 `protobuf:"varint,5,rep,packed,name=input_ids,json=inputIds,proto3" json:"input_ids,omitempty"`
	// Entry IDs of other input sets contained in this set.
	TransitiveSetIds []uint32 `protobuf:"varint,4,rep,packed,name=transitive_set_ids,json=transitiveSetIds,proto3" json:"transitive_set_ids,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ExecLogEntry_InputSet) Reset() {
	*x = ExecLogEntry_InputSet{}
	mi := &file_spawn_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecLogEntry_InputSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecLogEntry_InputSet) ProtoMessage() {}

func (x *ExecLogEntry_InputSet) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecLogEntry_InputSet.ProtoReflect.Descriptor instead.
func (*ExecLogEntry_InputSet) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{6, 4}
}

func (x *ExecLogEntry_InputSet) GetInputIds() []uint32 {
	if x != nil {
		return x.InputIds
	}
	return nil
}

func (x *ExecLogEntry_InputSet) GetTransitiveSetIds() []uint32 {
	if x != nil {
		return x.TransitiveSetIds
	}
	return nil
}

// A collection of runfiles symlinked at custom locations.
// The contents of the set are the directly contained entries in addition to
// the contents of all transitively referenced sets. When order matters,
// transitive sets come before direct entries and within a set, entries are
// considered in left-to-right order ("postorder").
// Sets are not canonical: two sets with different structure may yield the
// same contents.
type ExecLogEntry_SymlinkEntrySet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A map from relative paths of runfiles symlinks to the entry IDs of the
	// symlink target, which may be a file, directory, or unresolved symlink.
	DirectEntries map[string]uint32 `protobuf:"bytes,1,rep,name=direct_entries,json=directEntries,proto3" json:"direct_entries,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// Entry IDs of other symlink entry sets transitively contained in this set.
	TransitiveSetIds []uint32 `protobuf:"varint,2,rep,packed,name=transitive_set_ids,json=transitiveSetIds,proto3" json:"transitive_set_ids,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ExecLogEntry_SymlinkEntrySet) Reset() {
	*x = ExecLogEntry_SymlinkEntrySet{}
	mi := &file_spawn_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecLogEntry_SymlinkEntrySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecLogEntry_SymlinkEntrySet) ProtoMessage() {}

func (x *ExecLogEntry_SymlinkEntrySet) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecLogEntry_SymlinkEntrySet.ProtoReflect.Descriptor instead.
func (*ExecLogEntry_SymlinkEntrySet) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{6, 5}
}

func (x *ExecLogEntry_SymlinkEntrySet) GetDirectEntries() map[string]uint32 {
	if x != nil {
		return x.DirectEntries
	}
	return nil
}

func (x *ExecLogEntry_SymlinkEntrySet) GetTransitiveSetIds() []uint32 {
	if x != nil {
		return x.TransitiveSetIds
	}
	return nil
}

// A structured representation of the .runfiles directory of an executable.
//
// Instead of storing the directory directly, the tree is represented
// similarly to its in-memory representation in Bazel and needs to be
// reassembled from the following parts (in case of path collisions, later
// entries overwrite earlier ones):
//
// 1. symlinks (symlinks_id)
// 2. artifacts at canonical locations (input_set_id)
// 3. empty files (empty_files)
// 4. root symlinks (root_symlinks_id)
// 5. the _repo_mapping file with the repo mapping manifest
// (repo_mapping_manifest)
// 6. the <workspace runfiles directory>/.runfile file (if the workspace
// runfiles directory
//
//	wouldn't exist otherwise)
//
// See SpawnLogReconstructor#reconstructRunfilesDir for details.
type ExecLogEntry_RunfilesTree struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The runfiles tree path.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The entry ID of the set of artifacts in the runfiles tree that are
	// symlinked at their canonical locations relative to the tree path.
	// See SpawnLogReconstructor#getRunfilesPaths for how to recover the
	// tree-relative paths of the artifacts from their exec paths.
	//
	// In case of path collisions, later artifacts overwrite earlier ones and
	// artifacts override custom symlinks.
	//
	// The referenced set must not transitively contain any runfile trees.
	InputSetId uint32 `protobuf:"varint,2,opt,name=input_set_id,json=inputSetId,proto3" json:"input_set_id,omitempty"`
	// The entry ID of the set of symlink entries with paths relative to the
	// subdirectory of the runfiles tree root corresponding to the main
	// repository.
	SymlinksId uint32 `protobuf:"varint,3,opt,name=symlinks_id,json=symlinksId,proto3" json:"symlinks_id,omitempty"`
	// The entry ID of the set of symlink entries with paths relative to the
	// root of the runfiles tree.
	RootSymlinksId uint32 `protobuf:"varint,4,opt,name=root_symlinks_id,json=rootSymlinksId,proto3" json:"root_symlinks_id,omitempty"`
	// The paths of empty files relative to the subdirectory of the runfiles
	// tree root corresponding to the main repository.
	EmptyFiles []string `protobuf:"bytes,5,rep,name=empty_files,json=emptyFiles,proto3" json:"empty_files,omitempty"`
	// The "_repo_mapping" file at the root of the runfiles tree, if it exists.
	// Only the digest is stored as the relative path is fixed.
	RepoMappingManifest *ExecLogEntry_File `protobuf:"bytes,6,opt,name=repo_mapping_manifest,json=repoMappingManifest,proto3" json:"repo_mapping_manifest,omitempty"`
	// Whether the runfiles tree contains external runfiles at their legacy
	// locations (e.g. _main/external/bazel_tools/tools/bash/runfiles.bash)
	// in addition to the default locations (e.g.
	// bazel_tools/tools/bash/runfiles.bash).
	LegacyExternalRunfiles bool `protobuf:"varint,7,opt,name=legacy_external_runfiles,json=legacyExternalRunfiles,proto3" json:"legacy_external_runfiles,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ExecLogEntry_RunfilesTree) Reset() {
	*x = ExecLogEntry_RunfilesTree{}
	mi := &file_spawn_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecLogEntry_RunfilesTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecLogEntry_RunfilesTree) ProtoMessage() {}

func (x *ExecLogEntry_RunfilesTree) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecLogEntry_RunfilesTree.ProtoReflect.Descriptor instead.
func (*ExecLogEntry_RunfilesTree) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{6, 6}
}

func (x *ExecLogEntry_RunfilesTree) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ExecLogEntry_RunfilesTree) GetInputSetId() uint32 {
	if x != nil {
		return x.InputSetId
	}
	return 0
}

func (x *ExecLogEntry_RunfilesTree) GetSymlinksId() uint32 {
	if x != nil {
		return x.SymlinksId
	}
	return 0
}

func (x *ExecLogEntry_RunfilesTree) GetRootSymlinksId() uint32 {
	if x != nil {
		return x.RootSymlinksId
	}
	return 0
}

func (x *ExecLogEntry_RunfilesTree) GetEmptyFiles() []string {
	if x != nil {
		return x.EmptyFiles
	}
	return nil
}

func (x *ExecLogEntry_RunfilesTree) GetRepoMappingManifest() *ExecLogEntry_File {
	if x != nil {
		return x.RepoMappingManifest
	}
	return nil
}

func (x *ExecLogEntry_RunfilesTree) GetLegacyExternalRunfiles() bool {
	if x != nil {
		return x.LegacyExternalRunfiles
	}
	return false
}

// A spawn output.
type ExecLogEntry_Output struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*ExecLogEntry_Output_OutputId
	//	*ExecLogEntry_Output_InvalidOutputPath
	Type          isExecLogEntry_Output_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecLogEntry_Output) Reset() {
	*x = ExecLogEntry_Output{}
	mi := &file_spawn_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecLogEntry_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecLogEntry_Output) ProtoMessage() {}

func (x *ExecLogEntry_Output) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecLogEntry_Output.ProtoReflect.Descriptor instead.
func (*ExecLogEntry_Output) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{6, 7}
}

func (x *ExecLogEntry_Output) GetType() isExecLogEntry_Output_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ExecLogEntry_Output) GetOutputId() uint32 {
	if x != nil {
		if x, ok := x.Type.(*ExecLogEntry_Output_OutputId); ok {
			return x.OutputId
		}
	}
	return 0
}

func (x *ExecLogEntry_Output) GetInvalidOutputPath() string {
	if x != nil {
		if x, ok := x.Type.(*ExecLogEntry_Output_InvalidOutputPath); ok {
			return x.InvalidOutputPath
		}
	}
	return ""
}

type isExecLogEntry_Output_Type interface {
	isExecLogEntry_Output_Type()
}

type ExecLogEntry_Output_OutputId struct {
	// The ID of a file (ctx.actions.declare_file), directory
	// (ctx.actions.declare_directory) or unresolved symlink
	// (ctx.actions.declare_symlink) that is an output of the spawn.
	OutputId uint32 `protobuf:"varint,5,opt,name=output_id,json=outputId,proto3,oneof"`
}

type ExecLogEntry_Output_InvalidOutputPath struct {
	// A declared output that is either missing or has the wrong type
	// (e.g., a file where a directory was expected).
	InvalidOutputPath string `protobuf:"bytes,4,opt,name=invalid_output_path,json=invalidOutputPath,proto3,oneof"`
}

func (*ExecLogEntry_Output_OutputId) isExecLogEntry_Output_Type() {}

func (*ExecLogEntry_Output_InvalidOutputPath) isExecLogEntry_Output_Type() {}

// An executed spawn.
type ExecLogEntry_Spawn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The command line arguments.
	Args []string `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	// The environment variables.
	EnvVars []*EnvironmentVariable `protobuf:"bytes,2,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty"`
	// The execution platform.
	Platform *Platform `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	// Entry ID of the set of inputs. Unset means empty.
	InputSetId uint32 `protobuf:"varint,4,opt,name=input_set_id,json=inputSetId,proto3" json:"input_set_id,omitempty"`
	// Entry ID of the set of tool inputs. Unset means empty.
	ToolSetId uint32 `protobuf:"varint,5,opt,name=tool_set_id,json=toolSetId,proto3" json:"tool_set_id,omitempty"`
	// The set of outputs.
	Outputs []*ExecLogEntry_Output `protobuf:"bytes,6,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// See SpawnExec.label.
	TargetLabel string `protobuf:"bytes,7,opt,name=target_label,json=targetLabel,proto3" json:"target_label,omitempty"`
	// See SpawnExec.mnemonic.
	Mnemonic string `protobuf:"bytes,8,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	// See SpawnExec.exit_code.
	ExitCode int32 `protobuf:"varint,9,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// See SpawnExec.status.
	Status string `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// See SpawnExec.runner.
	Runner string `protobuf:"bytes,11,opt,name=runner,proto3" json:"runner,omitempty"`
	// See SpawnExec.cache_hit.
	CacheHit bool `protobuf:"varint,12,opt,name=cache_hit,json=cacheHit,proto3" json:"cache_hit,omitempty"`
	// See SpawnExec.remotable.
	Remotable bool `protobuf:"varint,13,opt,name=remotable,proto3" json:"remotable,omitempty"`
	// See SpawnExec.cacheable.
	Cacheable bool `protobuf:"varint,14,opt,name=cacheable,proto3" json:"cacheable,omitempty"`
	// See SpawnExec.remote_cacheable.
	RemoteCacheable bool `protobuf:"varint,15,opt,name=remote_cacheable,json=remoteCacheable,proto3" json:"remote_cacheable,omitempty"`
	// See SpawnExec.digest.
	// The hash function name is omitted. It can be obtained from Invocation.
	// Unset if the file is empty.
	Digest *Digest `protobuf:"bytes,16,opt,name=digest,proto3" json:"digest,omitempty"`
	// See SpawnExec.timeout_millis.
	TimeoutMillis int64 `protobuf:"varint,17,opt,name=timeout_millis,json=timeoutMillis,proto3" json:"timeout_millis,omitempty"`
	// See SpawnExec.metrics.
	Metrics       *SpawnMetrics `protobuf:"bytes,18,opt,name=metrics,proto3" json:"metrics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecLogEntry_Spawn) Reset() {
	*x = ExecLogEntry_Spawn{}
	mi := &file_spawn_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecLogEntry_Spawn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecLogEntry_Spawn) ProtoMessage() {}

func (x *ExecLogEntry_Spawn) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecLogEntry_Spawn.ProtoReflect.Descriptor instead.
func (*ExecLogEntry_Spawn) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{6, 8}
}

func (x *ExecLogEntry_Spawn) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ExecLogEntry_Spawn) GetEnvVars() []*EnvironmentVariable {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

func (x *ExecLogEntry_Spawn) GetPlatform() *Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *ExecLogEntry_Spawn) GetInputSetId() uint32 {
	if x != nil {
		return x.InputSetId
	}
	return 0
}

func (x *ExecLogEntry_Spawn) GetToolSetId() uint32 {
	if x != nil {
		return x.ToolSetId
	}
	return 0
}

func (x *ExecLogEntry_Spawn) GetOutputs() []*ExecLogEntry_Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *ExecLogEntry_Spawn) GetTargetLabel() string {
	if x != nil {
		return x.TargetLabel
	}
	return ""
}

func (x *ExecLogEntry_Spawn) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

func (x *ExecLogEntry_Spawn) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ExecLogEntry_Spawn) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ExecLogEntry_Spawn) GetRunner() string {
	if x != nil {
		return x.Runner
	}
	return ""
}

func (x *ExecLogEntry_Spawn) GetCacheHit() bool {
	if x != nil {
		return x.CacheHit
	}
	return false
}

func (x *ExecLogEntry_Spawn) GetRemotable() bool {
	if x != nil {
		return x.Remotable
	}
	return false
}

func (x *ExecLogEntry_Spawn) GetCacheable() bool {
	if x != nil {
		return x.Cacheable
	}
	return false
}

func (x *ExecLogEntry_Spawn) GetRemoteCacheable() bool {
	if x != nil {
		return x.RemoteCacheable
	}
	return false
}

func (x *ExecLogEntry_Spawn) GetDigest() *Digest {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *ExecLogEntry_Spawn) GetTimeoutMillis() int64 {
	if x != nil {
		return x.TimeoutMillis
	}
	return 0
}

func (x *ExecLogEntry_Spawn) GetMetrics() *SpawnMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// A symlink action, which is not backed by a spawn.
type ExecLogEntry_SymlinkAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The path of the input file of the action (i.e., the target of the
	// symlink).
	InputPath string `protobuf:"bytes,1,opt,name=input_path,json=inputPath,proto3" json:"input_path,omitempty"`
	// The path of the output file of the action (i.e., the symlink itself).
	OutputPath string `protobuf:"bytes,2,opt,name=output_path,json=outputPath,proto3" json:"output_path,omitempty"`
	// The canonical label of the target this action belongs to.
	TargetLabel string `protobuf:"bytes,3,opt,name=target_label,json=targetLabel,proto3" json:"target_label,omitempty"`
	// The mnemonic of the action.
	Mnemonic      string `protobuf:"bytes,4,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecLogEntry_SymlinkAction) Reset() {
	*x = ExecLogEntry_SymlinkAction{}
	mi := &file_spawn_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecLogEntry_SymlinkAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecLogEntry_SymlinkAction) ProtoMessage() {}

func (x *ExecLogEntry_SymlinkAction) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecLogEntry_SymlinkAction.ProtoReflect.Descriptor instead.
func (*ExecLogEntry_SymlinkAction) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{6, 9}
}

func (x *ExecLogEntry_SymlinkAction) GetInputPath() string {
	if x != nil {
		return x.InputPath
	}
	return ""
}

func (x *ExecLogEntry_SymlinkAction) GetOutputPath() string {
	if x != nil {
		return x.OutputPath
	}
	return ""
}

func (x *ExecLogEntry_SymlinkAction) GetTargetLabel() string {
	if x != nil {
		return x.TargetLabel
	}
	return ""
}

func (x *ExecLogEntry_SymlinkAction) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

var File_spawn_proto protoreflect.FileDescriptor

const file_spawn_proto_rawDesc = "" +
	"\n" +
	"\vspawn.proto\x12\ftools.protos\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"i\n" +
	"\x06Digest\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\tR\x04hash\x12\x1d\n" +
	"\n" +
	"size_bytes\x18\x02 \x01(\x03R\tsizeBytes\x12,\n" +
	"\x12hash_function_name\x18\x03 \x01(\tR\x10hashFunctionName\"\x91\x01\n" +
	"\x04File\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12.\n" +
	"\x13symlink_target_path\x18\x04 \x01(\tR\x11symlinkTargetPath\x12,\n" +
	"\x06digest\x18\x02 \x01(\v2\x14.tools.protos.DigestR\x06digest\x12\x17\n" +
	"\ais_tool\x18\x03 \x01(\bR\x06isTool\"?\n" +
	"\x13EnvironmentVariable\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"\x81\x01\n" +
	"\bPlatform\x12?\n" +
	"\n" +
	"properties\x18\x01 \x03(\v2\x1f.tools.protos.Platform.PropertyR\n" +
	"properties\x1a4\n" +
	"\bProperty\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"\xc9\b\n" +
	"\fSpawnMetrics\x128\n" +
	"\n" +
	"total_time\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\ttotalTime\x128\n" +
	"\n" +
	"parse_time\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\tparseTime\x12<\n" +
	"\fnetwork_time\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\vnetworkTime\x128\n" +
	"\n" +
	"fetch_time\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\tfetchTime\x128\n" +
	"\n" +
	"queue_time\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\tqueueTime\x128\n" +
	"\n" +
	"setup_time\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\tsetupTime\x12:\n" +
	"\vupload_time\x18\a \x01(\v2\x19.google.protobuf.DurationR\n" +
	"uploadTime\x12I\n" +
	"\x13execution_wall_time\x18\b \x01(\v2\x19.google.protobuf.DurationR\x11executionWallTime\x12K\n" +
	"\x14process_outputs_time\x18\t \x01(\v2\x19.google.protobuf.DurationR\x12processOutputsTime\x128\n" +
	"\n" +
	"retry_time\x18\n" +
	" \x01(\v2\x19.google.protobuf.DurationR\tretryTime\x12\x1f\n" +
	"\vinput_bytes\x18\v \x01(\x03R\n" +
	"inputBytes\x12\x1f\n" +
	"\vinput_files\x18\f \x01(\x03R\n" +
	"inputFiles\x122\n" +
	"\x15memory_estimate_bytes\x18\r \x01(\x03R\x13memoryEstimateBytes\x12*\n" +
	"\x11input_bytes_limit\x18\x0e \x01(\x03R\x0finputBytesLimit\x12*\n" +
	"\x11input_files_limit\x18\x0f \x01(\x03R\x0finputFilesLimit\x12,\n" +
	"\x12output_bytes_limit\x18\x10 \x01(\x03R\x10outputBytesLimit\x12,\n" +
	"\x12output_files_limit\x18\x11 \x01(\x03R\x10outputFilesLimit\x12,\n" +
	"\x12memory_bytes_limit\x18\x12 \x01(\x03R\x10memoryBytesLimit\x128\n" +
	"\n" +
	"time_limit\x18\x13 \x01(\v2\x19.google.protobuf.DurationR\ttimeLimit\x129\n" +
	"\n" +
	"start_time\x18\x14 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\"\xef\x05\n" +
	"\tSpawnExec\x12!\n" +
	"\fcommand_args\x18\x01 \x03(\tR\vcommandArgs\x12V\n" +
	"\x15environment_variables\x18\x02 \x03(\v2!.tools.protos.EnvironmentVariableR\x14environmentVariables\x122\n" +
	"\bplatform\x18\x03 \x01(\v2\x16.tools.protos.PlatformR\bplatform\x12*\n" +
	"\x06inputs\x18\x04 \x03(\v2\x12.tools.protos.FileR\x06inputs\x12%\n" +
	"\x0elisted_outputs\x18\x05 \x03(\tR\rlistedOutputs\x12\x1c\n" +
	"\tremotable\x18\x06 \x01(\bR\tremotable\x12\x1c\n" +
	"\tcacheable\x18\a \x01(\bR\tcacheable\x12%\n" +
	"\x0etimeout_millis\x18\b \x01(\x03R\rtimeoutMillis\x12\x1a\n" +
	"\bmnemonic\x18\n" +
	" \x01(\tR\bmnemonic\x129\n" +
	"\x0eactual_outputs\x18\v \x03(\v2\x12.tools.protos.FileR\ractualOutputs\x12\x16\n" +
	"\x06runner\x18\f \x01(\tR\x06runner\x12\x1b\n" +
	"\tcache_hit\x18\r \x01(\bR\bcacheHit\x12\x16\n" +
	"\x06status\x18\x0e \x01(\tR\x06status\x12\x1b\n" +
	"\texit_code\x18\x0f \x01(\x05R\bexitCode\x12)\n" +
	"\x10remote_cacheable\x18\x10 \x01(\bR\x0fremoteCacheable\x12!\n" +
	"\ftarget_label\x18\x12 \x01(\tR\vtargetLabel\x12,\n" +
	"\x06digest\x18\x13 \x01(\v2\x14.tools.protos.DigestR\x06digest\x124\n" +
	"\ametrics\x18\x14 \x01(\v2\x1a.tools.protos.SpawnMetricsR\ametricsJ\x04\b\t\x10\n" +
	"J\x04\b\x11\x10\x12\"\xc2\x15\n" +
	"\fExecLogEntry\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12G\n" +
	"\n" +
	"invocation\x18\x02 \x01(\v2%.tools.protos.ExecLogEntry.InvocationH\x00R\n" +
	"invocation\x125\n" +
	"\x04file\x18\x03 \x01(\v2\x1f.tools.protos.ExecLogEntry.FileH\x00R\x04file\x12D\n" +
	"\tdirectory\x18\x04 \x01(\v2$.tools.protos.ExecLogEntry.DirectoryH\x00R\tdirectory\x12]\n" +
	"\x12unresolved_symlink\x18\x05 \x01(\v2,.tools.protos.ExecLogEntry.UnresolvedSymlinkH\x00R\x11unresolvedSymlink\x12B\n" +
	"\tinput_set\x18\x06 \x01(\v2#.tools.protos.ExecLogEntry.InputSetH\x00R\binputSet\x128\n" +
	"\x05spawn\x18\a \x01(\v2 .tools.protos.ExecLogEntry.SpawnH\x00R\x05spawn\x12Q\n" +
	"\x0esymlink_action\x18\b \x01(\v2(.tools.protos.ExecLogEntry.SymlinkActionH\x00R\rsymlinkAction\x12X\n" +
	"\x11symlink_entry_set\x18\t \x01(\v2*.tools.protos.ExecLogEntry.SymlinkEntrySetH\x00R\x0fsymlinkEntrySet\x12N\n" +
	"\rrunfiles_tree\x18\n" +
	" \x01(\v2'.tools.protos.ExecLogEntry.RunfilesTreeH\x00R\frunfilesTree\x1a\xc8\x01\n" +
	"\n" +
	"Invocation\x12,\n" +
	"\x12hash_function_name\x18\x01 \x01(\tR\x10hashFunctionName\x12@\n" +
	"\x1cworkspace_runfiles_directory\x18\x02 \x01(\tR\x1aworkspaceRunfilesDirectory\x12:\n" +
	"\x19sibling_repository_layout\x18\x03 \x01(\bR\x17siblingRepositoryLayout\x12\x0e\n" +
	"\x02id\x18\x04 \x01(\tR\x02id\x1aH\n" +
	"\x04File\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12,\n" +
	"\x06digest\x18\x02 \x01(\v2\x14.tools.protos.DigestR\x06digest\x1aV\n" +
	"\tDirectory\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x125\n" +
	"\x05files\x18\x02 \x03(\v2\x1f.tools.protos.ExecLogEntry.FileR\x05files\x1aH\n" +
	"\x11UnresolvedSymlink\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x1f\n" +
	"\vtarget_path\x18\x02 \x01(\tR\n" +
	"targetPath\x1ag\n" +
	"\bInputSet\x12\x1b\n" +
	"\tinput_ids\x18\x05 \x03(\rR\binputIds\x12,\n" +
	"\x12transitive_set_ids\x18\x04 \x03(\rR\x10transitiveSetIdsJ\x04\b\x01\x10\x02J\x04\b\x02\x10\x03J\x04\b\x03\x10\x04\x1a\xe7\x01\n" +
	"\x0fSymlinkEntrySet\x12d\n" +
	"\x0edirect_entries\x18\x01 \x03(\v2=.tools.protos.ExecLogEntry.SymlinkEntrySet.DirectEntriesEntryR\rdirectEntries\x12,\n" +
	"\x12transitive_set_ids\x18\x02 \x03(\rR\x10transitiveSetIds\x1a@\n" +
	"\x12DirectEntriesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a\xbf\x02\n" +
	"\fRunfilesTree\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12 \n" +
	"\finput_set_id\x18\x02 \x01(\rR\n" +
	"inputSetId\x12\x1f\n" +
	"\vsymlinks_id\x18\x03 \x01(\rR\n" +
	"symlinksId\x12(\n" +
	"\x10root_symlinks_id\x18\x04 \x01(\rR\x0erootSymlinksId\x12\x1f\n" +
	"\vempty_files\x18\x05 \x03(\tR\n" +
	"emptyFiles\x12S\n" +
	"\x15repo_mapping_manifest\x18\x06 \x01(\v2\x1f.tools.protos.ExecLogEntry.FileR\x13repoMappingManifest\x128\n" +
	"\x18legacy_external_runfiles\x18\a \x01(\bR\x16legacyExternalRunfiles\x1as\n" +
	"\x06Output\x12\x1d\n" +
	"\toutput_id\x18\x05 \x01(\rH\x00R\boutputId\x120\n" +
	"\x13invalid_output_path\x18\x04 \x01(\tH\x00R\x11invalidOutputPathB\x06\n" +
	"\x04typeJ\x04\b\x01\x10\x02J\x04\b\x02\x10\x03J\x04\b\x03\x10\x04\x1a\xa7\x05\n" +
	"\x05Spawn\x12\x12\n" +
	"\x04args\x18\x01 \x03(\tR\x04args\x12<\n" +
	"\benv_vars\x18\x02 \x03(\v2!.tools.protos.EnvironmentVariableR\aenvVars\x122\n" +
	"\bplatform\x18\x03 \x01(\v2\x16.tools.protos.PlatformR\bplatform\x12 \n" +
	"\finput_set_id\x18\x04 \x01(\rR\n" +
	"inputSetId\x12\x1e\n" +
	"\vtool_set_id\x18\x05 \x01(\rR\ttoolSetId\x12;\n" +
	"\aoutputs\x18\x06 \x03(\v2!.tools.protos.ExecLogEntry.OutputR\aoutputs\x12!\n" +
	"\ftarget_label\x18\a \x01(\tR\vtargetLabel\x12\x1a\n" +
	"\bmnemonic\x18\b \x01(\tR\bmnemonic\x12\x1b\n" +
	"\texit_code\x18\t \x01(\x05R\bexitCode\x12\x16\n" +
	"\x06status\x18\n" +
	" \x01(\tR\x06status\x12\x16\n" +
	"\x06runner\x18\v \x01(\tR\x06runner\x12\x1b\n" +
	"\tcache_hit\x18\f \x01(\bR\bcacheHit\x12\x1c\n" +
	"\tremotable\x18\r \x01(\bR\tremotable\x12\x1c\n" +
	"\tcacheable\x18\x0e \x01(\bR\tcacheable\x12)\n" +
	"\x10remote_cacheable\x18\x0f \x01(\bR\x0fremoteCacheable\x12,\n" +
	"\x06digest\x18\x10 \x01(\v2\x14.tools.protos.DigestR\x06digest\x12%\n" +
	"\x0etimeout_millis\x18\x11 \x01(\x03R\rtimeoutMillis\x124\n" +
	"\ametrics\x18\x12 \x01(\v2\x1a.tools.protos.SpawnMetricsR\ametrics\x1a\x8e\x01\n" +
	"\rSymlinkAction\x12\x1d\n" +
	"\n" +
	"input_path\x18\x01 \x01(\tR\tinputPath\x12\x1f\n" +
	"\voutput_path\x18\x02 \x01(\tR\n" +
	"outputPath\x12!\n" +
	"\ftarget_label\x18\x03 \x01(\tR\vtargetLabel\x12\x1a\n" +
	"\bmnemonic\x18\x04 \x01(\tR\bmnemonicB\x06\n" +
	"\x04typeB,\n" +
	"\"com.google.devtools.build.lib.execB\x06Protosb\x06proto3"

var (
	file_spawn_proto_rawDescOnce sync.Once
	file_spawn_proto_rawDescData []byte
)

func file_spawn_proto_rawDescGZIP() []byte {
	file_spawn_proto_rawDescOnce.Do(func() {
		file_spawn_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spawn_proto_rawDesc), len(file_spawn_proto_rawDesc)))
	})
	return file_spawn_proto_rawDescData
}

var file_spawn_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_spawn_proto_goTypes = []any{
	(*Digest)(nil),                         // 0: tools.protos.Digest
	(*File)(nil),                           // 1: tools.protos.File
	(*EnvironmentVariable)(nil),            // 2: tools.protos.EnvironmentVariable
	(*Platform)(nil),                       // 3: tools.protos.Platform
	(*SpawnMetrics)(nil),                   // 4: tools.protos.SpawnMetrics
	(*SpawnExec)(nil),                      // 5: tools.protos.SpawnExec
	(*ExecLogEntry)(nil),                   // 6: tools.protos.ExecLogEntry
	(*Platform_Property)(nil),              // 7: tools.protos.Platform.Property
	(*ExecLogEntry_Invocation)(nil),        // 8: tools.protos.ExecLogEntry.Invocation
	(*ExecLogEntry_File)(nil),              // 9: tools.protos.ExecLogEntry.File
	(*ExecLogEntry_Directory)(nil),         // 10: tools.protos.ExecLogEntry.Directory
	(*ExecLogEntry_UnresolvedSymlink)(nil), // 11: tools.protos.ExecLogEntry.UnresolvedSymlink
	(*ExecLogEntry_InputSet)(nil),          // 12: tools.protos.ExecLogEntry.InputSet
	(*ExecLogEntry_SymlinkEntrySet)(nil),   // 13: tools.protos.ExecLogEntry.SymlinkEntrySet
	(*ExecLogEntry_RunfilesTree)(nil),      // 14: tools.protos.ExecLogEntry.RunfilesTree
	(*ExecLogEntry_Output)(nil),            // 15: tools.protos.ExecLogEntry.Output
	(*ExecLogEntry_Spawn)(nil),             // 16: tools.protos.ExecLogEntry.Spawn
	(*ExecLogEntry_SymlinkAction)(nil),     // 17: tools.protos.ExecLogEntry.SymlinkAction
	nil,                                    // 18: tools.protos.ExecLogEntry.SymlinkEntrySet.DirectEntriesEntry
	(*durationpb.Duration)(nil),            // 19: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),          // 20: google.protobuf.Timestamp
}
var file_spawn_proto_depIdxs = []int32{
	0,  // 0: tools.protos.File.digest:type_name -> tools.protos.Digest
	7,  // 1: tools.protos.Platform.properties:type_name -> tools.protos.Platform.Property
	19, // 2: tools.protos.SpawnMetrics.total_time:type_name -> google.protobuf.Duration
	19, // 3: tools.protos.SpawnMetrics.parse_time:type_name -> google.protobuf.Duration
	19, // 4: tools.protos.SpawnMetrics.network_time:type_name -> google.protobuf.Duration
	19, // 5: tools.protos.SpawnMetrics.fetch_time:type_name -> google.protobuf.Duration
	19, // 6: tools.protos.SpawnMetrics.queue_time:type_name -> google.protobuf.Duration
	19, // 7: tools.protos.SpawnMetrics.setup_time:type_name -> google.protobuf.Duration
	19, // 8: tools.protos.SpawnMetrics.upload_time:type_name -> google.protobuf.Duration
	19, // 9: tools.protos.SpawnMetrics.execution_wall_time:type_name -> google.protobuf.Duration
	19, // 10: tools.protos.SpawnMetrics.process_outputs_time:type_name -> google.protobuf.Duration
	19, // 11: tools.protos.SpawnMetrics.retry_time:type_name -> google.protobuf.Duration
	19, // 12: tools.protos.SpawnMetrics.time_limit:type_name -> google.protobuf.Duration
	20, // 13: tools.protos.SpawnMetrics.start_time:type_name -> google.protobuf.Timestamp
	2,  // 14: tools.protos.SpawnExec.environment_variables:type_name -> tools.protos.EnvironmentVariable
	3,  // 15: tools.protos.SpawnExec.platform:type_name -> tools.protos.Platform
	1,  // 16: tools.protos.SpawnExec.inputs:type_name -> tools.protos.File
	1,  // 17: tools.protos.SpawnExec.actual_outputs:type_name -> tools.protos.File
	0,  // 18: tools.protos.SpawnExec.digest:type_name -> tools.protos.Digest
	4,  // 19: tools.protos.SpawnExec.metrics:type_name -> tools.protos.SpawnMetrics
	8,  // 20: tools.protos.ExecLogEntry.invocation:type_name -> tools.protos.ExecLogEntry.Invocation
	9,  // 21: tools.protos.ExecLogEntry.file:type_name -> tools.protos.ExecLogEntry.File
	10, // 22: tools.protos.ExecLogEntry.directory:type_name -> tools.protos.ExecLogEntry.Directory
	11, // 23: tools.protos.ExecLogEntry.unresolved_symlink:type_name -> tools.protos.ExecLogEntry.UnresolvedSymlink
	12, // 24: tools.protos.ExecLogEntry.input_set:type_name -> tools.protos.ExecLogEntry.InputSet
	16, // 25: tools.protos.ExecLogEntry.spawn:type_name -> tools.protos.ExecLogEntry.Spawn
	17, // 26: tools.protos.ExecLogEntry.symlink_action:type_name -> tools.protos.ExecLogEntry.SymlinkAction
	13, // 27: tools.protos.ExecLogEntry.symlink_entry_set:type_name -> tools.protos.ExecLogEntry.SymlinkEntrySet
	14, // 28: tools.protos.ExecLogEntry.runfiles_tree:type_name -> tools.protos.ExecLogEntry.RunfilesTree
	0,  // 29: tools.protos.ExecLogEntry.File.digest:type_name -> tools.protos.Digest
	9,  // 30: tools.protos.ExecLogEntry.Directory.files:type_name -> tools.protos.ExecLogEntry.File
	18, // 31: tools.protos.ExecLogEntry.SymlinkEntrySet.direct_entries:type_name -> tools.protos.ExecLogEntry.SymlinkEntrySet.DirectEntriesEntry
	9,  // 32: tools.protos.ExecLogEntry.RunfilesTree.repo_mapping_manifest:type_name -> tools.protos.ExecLogEntry.File
	2,  // 33: tools.protos.ExecLogEntry.Spawn.env_vars:type_name -> tools.protos.EnvironmentVariable
	3,  // 34: tools.protos.ExecLogEntry.Spawn.platform:type_name -> tools.protos.Platform
	15, // 35: tools.protos.ExecLogEntry.Spawn.outputs:type_name -> tools.protos.ExecLogEntry.Output
	0,  // 36: tools.protos.ExecLogEntry.Spawn.digest:type_name -> tools.protos.Digest
	4,  // 37: tools.protos.ExecLogEntry.Spawn.metrics:type_name -> tools.protos.SpawnMetrics
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_spawn_proto_init() }
func file_spawn_proto_init() {
	if File_spawn_proto != nil {
		return
	}
	file_spawn_proto_msgTypes[6].OneofWrappers = []any{
		(*ExecLogEntry_Invocation_)(nil),
		(*ExecLogEntry_File_)(nil),
		(*ExecLogEntry_Directory_)(nil),
		(*ExecLogEntry_UnresolvedSymlink_)(nil),
		(*ExecLogEntry_InputSet_)(nil),
		(*ExecLogEntry_Spawn_)(nil),
		(*ExecLogEntry_SymlinkAction_)(nil),
		(*ExecLogEntry_SymlinkEntrySet_)(nil),
		(*ExecLogEntry_RunfilesTree_)(nil),
	}
	file_spawn_proto_msgTypes[15].OneofWrappers = []any{
		(*ExecLogEntry_Output_OutputId)(nil),
		(*ExecLogEntry_Output_InvalidOutputPath)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spawn_proto_rawDesc), len(file_spawn_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spawn_proto_goTypes,
		DependencyIndexes: file_spawn_proto_depIdxs,
		MessageInfos:      file_spawn_proto_msgTypes,
	}.Build()
	File_spawn_proto = out.File
	file_spawn_proto_goTypes = nil
	file_spawn_proto_depIdxs = nil
}
